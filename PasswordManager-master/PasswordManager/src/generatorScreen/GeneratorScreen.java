package generatorScreen;

// import for all the needed additional services
import static java.awt.event.KeyEvent.VK_ENTER;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.WindowConstants;

/**
 *
 * @author henrijuvonen
 *
 * created 14.6.2016
 *
 * edited 16.7.2016 - added comments and refined code
 *
 * edited 17.7.2016 - added comments, option to save password as text file and
 * refined code
 *
 * edited 19.7.2016 - added comments, moved the descriptor type message dialog
 * to the beginning to check where the actual screen is set to show up
 *
 * 20.7.2016 - edited the main method as a lambda expression like Netbeans
 * suggested, made the defaut text for pwLabel final
 *
 * 22.7.2019 - re-imported to netbeans, tested git version control, updated
 * comments
 * all seems to be fine at this point of time
 *
 * 23.7.2019 - re-evaluated part of the functionality and comments
 * added components, logic and variables
 *
 */

// main class for this password generator - handles UI creation and logic for
// calling other classes that do the password generation
public class GeneratorScreen extends javax.swing.JFrame
{
    // default values used in validation
    private final String serviceURLFieldContent = "Insert the URL of the "
            + "service";
    private final String userIDFieldContent = "Insert ID you'll be using for "
            + "login";
    private final String serviceNameFieldContent = "Insert the name of the "
            + "service";
    
    // variables to store the input
    private String userID;
    private String serviceName;
    private String serviceURL;
    private String pwd;
    
    /**
     * Creates new form GeneratorScreen
     */
    public GeneratorScreen()
    {
        initComponents();
        this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        this.setResizable(false);
        JOptionPane.showMessageDialog(null, "This is a password generator, "
                + "please utilize it as often as possible!");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        pwLabel = new javax.swing.JLabel();
        pwTextField = new javax.swing.JTextField();
        generatorButton = new javax.swing.JButton();
        savePasswordAsTextCheckBox = new javax.swing.JCheckBox();
        shuffleLettersButton = new javax.swing.JCheckBox();
        userIDField = new javax.swing.JTextField();
        userIDLabel = new javax.swing.JLabel();
        serviceURLLabel = new javax.swing.JLabel();
        serviceNameLabel = new javax.swing.JLabel();
        serviceURLField = new javax.swing.JTextField();
        serviceNameField = new javax.swing.JTextField();
        pwGuideLabel = new javax.swing.JLabel();
        generatorMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        quitMenuItem = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pwLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pwLabel.setText("Enter a string of characters above as a seed for password");
        pwLabel.setAutoscrolls(true);

        pwTextField.setText("Insert characters / words to generate password. The more words the better!");
        pwTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pwTextFieldMouseClicked(evt);
            }
        });
        pwTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pwTextFieldKeyReleased(evt);
            }
        });

        generatorButton.setText("Generate!");
        generatorButton.setEnabled(false);
        generatorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatorButtonActionPerformed(evt);
            }
        });

        savePasswordAsTextCheckBox.setText("Save password as txt");
        savePasswordAsTextCheckBox.setEnabled(false);

        shuffleLettersButton.setText("Shuffle letters");
        shuffleLettersButton.setToolTipText("When selected, the password will be created with input letters in random order.");
        shuffleLettersButton.setEnabled(false);

        userIDField.setText("Insert ID you'll be using for login");
        userIDField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userIDFieldMouseClicked(evt);
            }
        });
        userIDField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                userIDFieldKeyReleased(evt);
            }
        });

        userIDLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        userIDLabel.setText("Login ID");
        userIDLabel.setAutoscrolls(true);

        serviceURLLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        serviceURLLabel.setText("Service URL");
        serviceURLLabel.setAutoscrolls(true);

        serviceNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        serviceNameLabel.setText("Service name");
        serviceNameLabel.setAutoscrolls(true);

        serviceURLField.setText("Insert the URL of the service");
        serviceURLField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                serviceURLFieldMouseClicked(evt);
            }
        });
        serviceURLField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                serviceURLFieldKeyReleased(evt);
            }
        });

        serviceNameField.setText("Insert the name of the service");
        serviceNameField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                serviceNameFieldMouseClicked(evt);
            }
        });
        serviceNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serviceNameFieldActionPerformed(evt);
            }
        });
        serviceNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                serviceNameFieldKeyReleased(evt);
            }
        });

        pwGuideLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pwGuideLabel.setText("Your Password:");
        pwGuideLabel.setAutoscrolls(true);

        fileMenu.setText("File");

        quitMenuItem.setText("Quit");
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(quitMenuItem);

        generatorMenuBar.add(fileMenu);

        setJMenuBar(generatorMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(savePasswordAsTextCheckBox, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(shuffleLettersButton)
                                .addGap(44, 44, 44)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(generatorButton))
                    .addComponent(pwTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(serviceURLLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(serviceNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(serviceURLField)
                            .addComponent(serviceNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(userIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(userIDField))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(pwGuideLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pwLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(6, 6, 6)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serviceNameLabel)
                    .addComponent(serviceNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serviceURLLabel)
                    .addComponent(serviceURLField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userIDLabel)
                    .addComponent(userIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pwTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pwLabel)
                    .addComponent(pwGuideLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(shuffleLettersButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(savePasswordAsTextCheckBox)
                    .addComponent(generatorButton))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
        confirmExit();
    }//GEN-LAST:event_quitMenuItemActionPerformed

    private void pwTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pwTextFieldMouseClicked
        String defaultTextFieldText = "Insert characters to create password "
                + "based on them...";

        // when the text field is clicked, the button for generating will be
        // enabled
        //pwTextField.setText(clearTextField());
        clearTextField(pwTextField);
        generatorButton.setEnabled(true);
        pwLabel.setEnabled(false);
        savePasswordAsTextCheckBox.setEnabled(true);
        shuffleLettersButton.setEnabled(true);
    }//GEN-LAST:event_pwTextFieldMouseClicked

    // listener for the generator-button
    private void generatorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generatorButtonActionPerformed

        pwCheckAndCall(pwTextField.getText());
    }//GEN-LAST:event_generatorButtonActionPerformed

    // listener that is in need of enter key - method that creates the password
    private void pwTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pwTextFieldKeyReleased

        // when the key pressed really is enter
        if(evt.getKeyCode() == VK_ENTER)
        {
            pwCheckAndCall(pwTextField.getText());
        }

    }//GEN-LAST:event_pwTextFieldKeyReleased

    private void userIDFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userIDFieldMouseClicked
        if(userIDField.getText().equals(userIDFieldContent)){
            clearTextField(userIDField);
            savePasswordAsTextCheckBox.setEnabled(true);
            shuffleLettersButton.setEnabled(true);
        }
    }//GEN-LAST:event_userIDFieldMouseClicked

    // listener that is in need of enter key - method that creates the password
    private void userIDFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userIDFieldKeyReleased
        // when the key pressed really is enter
        if(evt.getKeyCode() == VK_ENTER)
        {
            userID = userIDField.getText();
        }
    }//GEN-LAST:event_userIDFieldKeyReleased

    private void serviceURLFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_serviceURLFieldMouseClicked
        if(serviceURLField.getText().equals(serviceURLFieldContent)){
            clearTextField(serviceURLField);
            savePasswordAsTextCheckBox.setEnabled(true);
            shuffleLettersButton.setEnabled(true);
        }
    }//GEN-LAST:event_serviceURLFieldMouseClicked

    // listener that is in need of enter key - method that creates the password
    private void serviceURLFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_serviceURLFieldKeyReleased
        // when the key pressed really is enter
        if(evt.getKeyCode() == VK_ENTER)
        {
            serviceURL = serviceURLField.getText();
        }
    }//GEN-LAST:event_serviceURLFieldKeyReleased

    private void serviceNameFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_serviceNameFieldMouseClicked
        if(serviceNameField.getText().equals(serviceNameFieldContent)){
            clearTextField(serviceNameField);savePasswordAsTextCheckBox.setEnabled(true);
            shuffleLettersButton.setEnabled(true);
        }
    }//GEN-LAST:event_serviceNameFieldMouseClicked

    // listener that is in need of enter key - method that creates the password
    private void serviceNameFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_serviceNameFieldKeyReleased
        // when the key pressed really is enter
        if(evt.getKeyCode() == VK_ENTER)
        {
            serviceName = serviceNameField.getText();
        }
    }//GEN-LAST:event_serviceNameFieldKeyReleased

    // the method below may be removed?
    private void serviceNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serviceNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_serviceNameFieldActionPerformed

    //method to check the input is valid according to rules
    private void pwCheckAndCall(String pwInput)
    {
        boolean randomString = shuffleLettersButton.isSelected();

        // the password can't be less than 8 characters long
        if(pwTextField.getText().length() < 8)
        {
            String er = "Not enough letters. You must provide more than 8 "
                    + "letters.";
            JOptionPane.showMessageDialog(rootPane, er);
            //pwTextField.setText(clearTextField());
            clearTextField(pwTextField);
            generatorButton.setEnabled(false);
        }

        // enough characters have been provided
        else
        {
            pwd = PasswordCreator.createPassword(pwTextField.getText(), 
                    randomString);

            if(savePasswordAsTextCheckBox.isSelected())
            {
                createAndSave(pwd);
                pwLabel.setText("Password has been saved into filename.txt.");
            }
            else
            {
                pwLabel.setEnabled(true);
                pwLabel.setText(defaultLabelText + pwd);
            }
            
            pwd = "";
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GeneratorScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GeneratorScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GeneratorScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GeneratorScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        //JOptionPane.showMessageDialog(null, "This is a password generator, "
        //      + "please utilize it as often as possible!");
        java.awt.EventQueue.invokeLater(() -> {
            new GeneratorScreen().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton generatorButton;
    private javax.swing.JMenuBar generatorMenuBar;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JLabel pwGuideLabel;
    private javax.swing.JLabel pwLabel;
    private javax.swing.JTextField pwTextField;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JCheckBox savePasswordAsTextCheckBox;
    private javax.swing.JTextField serviceNameField;
    private javax.swing.JLabel serviceNameLabel;
    private javax.swing.JTextField serviceURLField;
    private javax.swing.JLabel serviceURLLabel;
    private javax.swing.JCheckBox shuffleLettersButton;
    private javax.swing.JTextField userIDField;
    private javax.swing.JLabel userIDLabel;
    // End of variables declaration//GEN-END:variables
    private final String defaultLabelText = "Your Password: ";

    // confirmation for closing the application
    private void confirmExit()
    {
        int n = JOptionPane.showConfirmDialog(null, "Are you sure you want to "
                + "exit?", "Exit?", JOptionPane.YES_NO_OPTION, 
                JOptionPane.WARNING_MESSAGE);
        if (n == 0) {
            dispose();
        }
    }

    // 23.7.2019: a new method to empty the text field
    private void clearTextField(JTextField tf){
        tf.setText("");
    }

    /** A method for creating a file and writing the user info into that.
     * @param password
     */

    public static void createAndSave(String password)
    {
        String fileName = "filename.txt";
        try
        {
            FileWriter file = new FileWriter(fileName);
            try (PrintWriter out = new PrintWriter(file)) {
                out.println(password);
            }
        }

        catch (IOException e)
        {
            e.printStackTrace();
        }
    }
}
